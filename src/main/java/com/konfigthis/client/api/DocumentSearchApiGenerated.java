/*
 * Visier Document Search API
 * Visier API for searching for Visier documents
 *
 * The version of the OpenAPI document: 22222222.99201.1200
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.SimpleDocumentHeaderSearchResponseDTO;
import com.konfigthis.client.model.Status;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DocumentSearchApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DocumentSearchApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DocumentSearchApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        if (apiClient.getApiKeyAuth() == null) {
            throw new IllegalArgumentException("\"apikey\" is required but no API key was provided. Please set \"apikey\" with ApiClient#setApiKeyAuth(String).");
        }
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call simpleSearchDocumentHeadersCall(String q, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1alpha/search/simple/document-headers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (q != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("q", q));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth", "BearerAuth", "CookieAuth", "OAuth2Auth", "OAuth2Auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call simpleSearchDocumentHeadersValidateBeforeCall(String q, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        return simpleSearchDocumentHeadersCall(q, limit, offset, _callback);

    }


    private ApiResponse<SimpleDocumentHeaderSearchResponseDTO> simpleSearchDocumentHeadersWithHttpInfo(String q, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = simpleSearchDocumentHeadersValidateBeforeCall(q, limit, offset, null);
        Type localVarReturnType = new TypeToken<SimpleDocumentHeaderSearchResponseDTO>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call simpleSearchDocumentHeadersAsync(String q, Integer limit, Integer offset, final ApiCallback<SimpleDocumentHeaderSearchResponseDTO> _callback) throws ApiException {

        okhttp3.Call localVarCall = simpleSearchDocumentHeadersValidateBeforeCall(q, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<SimpleDocumentHeaderSearchResponseDTO>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SimpleSearchDocumentHeadersRequestBuilder {
        private String q;
        private Integer limit;
        private Integer offset;

        private SimpleSearchDocumentHeadersRequestBuilder() {
        }

        /**
         * Set q
         * @param q The search query string. (optional)
         * @return SimpleSearchDocumentHeadersRequestBuilder
         */
        public SimpleSearchDocumentHeadersRequestBuilder q(String q) {
            this.q = q;
            return this;
        }
        
        /**
         * Set limit
         * @param limit The maximum number of results to return. Defaults to 100. (optional)
         * @return SimpleSearchDocumentHeadersRequestBuilder
         */
        public SimpleSearchDocumentHeadersRequestBuilder limit(Integer limit) {
            this.limit = limit;
            return this;
        }
        
        /**
         * Set offset
         * @param offset The index to start retrieving results from, also known as offset. Defaults to 0. (optional)
         * @return SimpleSearchDocumentHeadersRequestBuilder
         */
        public SimpleSearchDocumentHeadersRequestBuilder offset(Integer offset) {
            this.offset = offset;
            return this;
        }
        
        /**
         * Build call for simpleSearchDocumentHeaders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return simpleSearchDocumentHeadersCall(q, limit, offset, _callback);
        }


        /**
         * Execute simpleSearchDocumentHeaders request
         * @return SimpleDocumentHeaderSearchResponseDTO
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public SimpleDocumentHeaderSearchResponseDTO execute() throws ApiException {
            ApiResponse<SimpleDocumentHeaderSearchResponseDTO> localVarResp = simpleSearchDocumentHeadersWithHttpInfo(q, limit, offset);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute simpleSearchDocumentHeaders request with HTTP info returned
         * @return ApiResponse&lt;SimpleDocumentHeaderSearchResponseDTO&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SimpleDocumentHeaderSearchResponseDTO> executeWithHttpInfo() throws ApiException {
            return simpleSearchDocumentHeadersWithHttpInfo(q, limit, offset);
        }

        /**
         * Execute simpleSearchDocumentHeaders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SimpleDocumentHeaderSearchResponseDTO> _callback) throws ApiException {
            return simpleSearchDocumentHeadersAsync(q, limit, offset, _callback);
        }
    }

    /**
     * Perform a simple search for Visier document headers
     * Perform a simple search for Visier document headers, such as analysis titles. Simple search doesn&#39;t support keywords, Boolean expressions, or any other advanced search features.  Example: &#x60;GET /v1alpha/search/simple/document-headers?q&#x3D;My+Query&amp;limit&#x3D;10&#x60; returns the first 10 document headers that best match the query string &#x60;My Query&#x60;.   &lt;br&gt;**Note:** &lt;em&gt;This API is in **alpha**. While in alpha, APIs may change in a breaking way without notice; functionality may be removed, and no deprecation notices will be issued.  If you are interested in using this API, please contact your Customer Success Manager (CSM).&lt;/em&gt;
     * @return SimpleSearchDocumentHeadersRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Default error response </td><td>  -  </td></tr>
     </table>
     */
    public SimpleSearchDocumentHeadersRequestBuilder simpleSearchDocumentHeaders() throws IllegalArgumentException {
        return new SimpleSearchDocumentHeadersRequestBuilder();
    }
}
